{
  "name": "pixelalchemy-backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "google-ai-generativelanguage": "^0.7.0"
  }
}
require('dotenv').config();
const express = require('express');
const { GoogleGenerativeAI } = require('@google-ai/generativelanguage');
const cors = require('cors');

const app = express();
app.use(cors({
  origin: 'https://millerman1723-spec.github.io'
}));
app.use(express.json({ limit: '10mb' }));

const API_KEY = process.env.GOOGLE_API_KEY;
if (!API_KEY) {
  console.error("❌ ERROR: GOOGLE_API_KEY is not set in environment variables!");
  process.exit(1);
}

const genAI = new GoogleGenerativeAI(API_KEY);

app.post('/generate', async (req, res) => {
  try {
    const { prompt, negative, creativity, strength, image, mask } = req.body;
    
    // Construct the full prompt
    const fullPrompt = `${prompt}. --negative ${negative || 'blurry, low quality, watermarks'}`;
    
    // Text-to-Image flow
    if (!image) {
      const model = genAI.getGenerativeModel({ 
        model: "gemini-2.5-flash-image-preview"
      });
      
      const result = await model.generateContent(fullPrompt);
      const response = await result.response;
      
      const imagePart = response.candidates[0]?.content?.parts?.find(p => p.inlineData);
      if (!imagePart) {
        throw new Error("No image data returned from API");
      }
      
      return res.json({ 
        image: imagePart.inlineData.data,
        finishReason: response.candidates[0].finishReason
      });
    }
    
    // Image-to-Image flow (simplified)
    res.status(501).json({ 
      error: "Image-to-Image implementation required",
      details: "Contact developer for full implementation" 
    });
    
  } catch (error) {
    console.error("API Error:", error);
    res.status(500).json({ 
      error: error.message,
      details: "Check server logs"
    });
  }
});

const PORT = process.env.PORT || 10000;
app.listen(PORT, () => {
  console.log(`✅ Server running on port ${PORT}`);
  console.log("✨ Ready to process PixelAlchemy requests");
});
